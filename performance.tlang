
def fib(n) {
    var a = 0.0;
    var b = 1.0;
    var i = 0;
    while (i < n) {
        var c = a + b;
        a = b;
        b = c;
        i = i + 1;
    }
    return a;
}

def iter(msg) {
    var count = 0;
    for (char in msg) {
        count = count + 1;
    }
    return count;
}

def make_tree(d) {
    if (d > 0) {
        d = d - 1;
        return [make_tree(d), make_tree(d)];
    }
    return [null, null];
}

def check_tree(node) {
    var [l, r] = node;
    if (l == null) {
        return 1;
    } else {
        return 1 + check_tree(l) + check_tree(r);
    }
}

def make_check(d) {
    var x = make_tree(d);
    const result = check_tree(x);
    return result;
}

def sf(stretch_depth) {
    print([stretch_depth, make_check(stretch_depth)]);
}

def main(n) {
    var stretch_depth = n + 1;

    sf(stretch_depth);
    var long_lived_tree = make_tree(n);

    print([n, check_tree(long_lived_tree)]);

    if (true) {
        return;
    }

    var d = 4;
    var mmd = n + 4; 
    while (d < stretch_depth) {
        var i = (2).pow(mmd - d);
        var cs = 0;

        var j = 0;
        while (j < i) {
            cs = cs + make_check(d);
            j = j + 1;
        }

        print([i, d, cs]);
        d = d + 2;
    }

    print([n, check_tree(long_lived_tree)]);
}

def gc_test() {
    var i = 0;
    while (i < 100000) {
        print(i);

        i = i + 1;
    }
}


// fib(10000000);
main(15);
// gc_test();

